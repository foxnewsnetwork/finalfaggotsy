// Generated by CoffeeScript 1.3.3
var ActiveModel, backbone, client, redis, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

_ = require('underscore')._;

backbone = require('backbone');

redis = require('redis');

client = redis.createClient();

client.on("error", function(err) {
  console.log(err);
  throw err;
});

this.ActiveModel = ActiveModel = (function(_super) {

  __extends(ActiveModel, _super);

  function ActiveModel() {
    return ActiveModel.__super__.constructor.apply(this, arguments);
  }

  ActiveModel.Count = 0;

  ActiveModel.attr_accessible = function() {
    var attribute, attributes, _i, _len, _results,
      _this = this;
    attributes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _results = [];
    for (_i = 0, _len = attributes.length; _i < _len; _i++) {
      attribute = attributes[_i];
      _results.push((function(a) {
        return _this.set(a, null);
      })(attribute));
    }
    return _results;
  };

  ActiveModel.prototype.initialize = function(data) {
    return this.set(data);
  };

  ActiveModel.prototype.reload = function() {
    if (!(this.get("id") != null)) {
      return null;
    }
    return client.hgetall(this.get("id"), function(err, obj) {
      if (err) {
        return console.log(err);
      } else {
        return this.set(obj);
      }
    });
  };

  ActiveModel.prototype.save = function(done) {
    if (!this.get("id" != null)) {
      this.set("id", ActiveModel.Count);
      ActiveModel.Count += 1;
    }
    console.log(this.get("id"));
    console.log(this.attributes);
    return client.hmset(this.get("id"), this.attributes, done);
  };

  ActiveModel.prototype.update = function(data) {
    if (!this.get("id" != null)) {
      return null;
    } else {
      return client.HMSET(this.get("id"), data, function(err, obj) {
        console.dir(obj);
        return console.log(err);
      });
    }
  };

  ActiveModel.prototype.destroy = function() {
    if (!this.get("id" != null)) {
      return null;
    } else {
      return client.hdel(this.get("id"), function(err, obj) {
        console.log(err);
        return console.log(obj);
      });
    }
  };

  return ActiveModel;

})(backbone.Model);
